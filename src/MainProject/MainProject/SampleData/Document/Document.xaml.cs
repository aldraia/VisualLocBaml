//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.Document
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class Document { }
#else

	public class Document : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;
        private string __PathToBinaries = string.Empty;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public Document()
		{
			try
			{
				Uri resourceUri = new Uri("/MainProject;component/SampleData/Document/Document.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private Assemblies _Assemblies = new Assemblies();

		public Assemblies Assemblies
		{
			get
			{
				return this._Assemblies;
			}

			set
			{
				if (this._Assemblies != value)
				{
					this._Assemblies = value;
					this.OnPropertyChanged("Assemblies");
				}
			}
		}
		
		public string PathToBinaries
		{
			get
			{
				return this.__PathToBinaries;
			}

			set
			{
				if (this.__PathToBinaries != value)
				{
					this.__PathToBinaries = value;
					this.OnPropertyChanged("PathToBinaries");
				}
			}
		}
	}

	public class Assemblies : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private double _Count = 0;

		public double Count
		{
			get
			{
				return this._Count;
			}

			set
			{
				if (this._Count != value)
				{
					this._Count = value;
					this.OnPropertyChanged("Count");
				}
			}
		}
	}
#endif
}

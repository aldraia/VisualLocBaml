//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.AvailableAssemblies
{
	using System; 
	using System.ComponentModel;

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class AvailableAssemblies { }
#else

	public class AvailableAssemblies : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		public AvailableAssemblies()
		{
			try
			{
				Uri resourceUri = new Uri("/MainProject;component/SampleData/AvailableAssemblies/AvailableAssemblies.xaml", UriKind.RelativeOrAbsolute);
				System.Windows.Application.LoadComponent(this, resourceUri);
			}
			catch
			{
			}
		}

		private AvailableAssemblies1 _AvailableAssemblies1 = new AvailableAssemblies1();

		public AvailableAssemblies1 AvailableAssemblies1
		{
			get
			{
				return this._AvailableAssemblies1;
			}
		}

		private string _PathToBinaries = string.Empty;

		public string PathToBinaries
		{
			get
			{
				return this._PathToBinaries;
			}

			set
			{
				if (this._PathToBinaries != value)
				{
					this._PathToBinaries = value;
					this.OnPropertyChanged("PathToBinaries");
				}
			}
		}

		private string _DefaultCulture = string.Empty;

		public string DefaultCulture
		{
			get
			{
				return this._DefaultCulture;
			}

			set
			{
				if (this._DefaultCulture != value)
				{
					this._DefaultCulture = value;
					this.OnPropertyChanged("DefaultCulture");
				}
			}
		}
	}

	public class AvailableAssemblies1Item : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private bool _IsMissing = false;

		public bool IsMissing
		{
			get
			{
				return this._IsMissing;
			}

			set
			{
				if (this._IsMissing != value)
				{
					this._IsMissing = value;
					this.OnPropertyChanged("IsMissing");
				}
			}
		}

		private bool _IsSelected = false;

		public bool IsSelected
		{
			get
			{
				return this._IsSelected;
			}

			set
			{
				if (this._IsSelected != value)
				{
					this._IsSelected = value;
					this.OnPropertyChanged("IsSelected");
				}
			}
		}

		private Assembly _Assembly = new Assembly();

		public Assembly Assembly
		{
			get
			{
				return this._Assembly;
			}

			set
			{
				if (this._Assembly != value)
				{
					this._Assembly = value;
					this.OnPropertyChanged("Assembly");
				}
			}
		}
	}

	public class AvailableAssemblies1 : System.Collections.ObjectModel.ObservableCollection<AvailableAssemblies1Item>
	{ 
	}

	public class Assembly : INotifyPropertyChanged
	{
		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private string _AssemblyFile = string.Empty;

		public string AssemblyFile
		{
			get
			{
				return this._AssemblyFile;
			}

			set
			{
				if (this._AssemblyFile != value)
				{
					this._AssemblyFile = value;
					this.OnPropertyChanged("AssemblyFile");
				}
			}
		}

		private string _DefaultCulture = string.Empty;

		public string DefaultCulture
		{
			get
			{
				return this._DefaultCulture;
			}

			set
			{
				if (this._DefaultCulture != value)
				{
					this._DefaultCulture = value;
					this.OnPropertyChanged("DefaultCulture");
				}
			}
		}
	}
#endif
}
